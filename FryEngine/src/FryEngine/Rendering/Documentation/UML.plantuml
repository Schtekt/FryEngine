@startuml Rendering
class Window 
{
    +Window(const char* windowDisplayName, size_t width, size_t height);
    +~Window();
    
    +bool Init();
    +bool Release();
    +bool ProcessMessage();

    +void Render(const RenderTarget& target);
    +void SetWindowName(std::string& name);

    +size_t GetWidth() const;
    +size_t GetHeight() const;

    -std::string m_windowDisplayName;
    -HWND m_windowHandle;
    -BITMAPINFO m_bmInfo;
    -size_t m_width;
    -size_t m_height;
    -HDC m_hdc;
}

class RenderTarget
{
    +RenderTarget(unsigned int width, unsigned int height);
    +RenderTarget(const RenderTarget& other);
    +~RenderTarget();

    +unsigned int GetWidth() const;
    +unsigned int GetHeight() const;
    +uint32_t GetColor(unsigned int x, unsigned int y) const;
    +const uint32_t* GetPixels() const;

    +bool SetPixelColor(unsigned int x, unsigned int y, uint32_t color);
    +bool SetPixelColor(unsigned int x, unsigned int y, uint8_t red, uint8_t green, uint8_t blue);
    +void SetColor(uint32_t color);
    +void SetColor(uint8_t red, uint8_t green, uint8_t blue);

    +void DrawLine(int x1, int y1, int x2, int y2, uint32_t color);
    +void DrawTri(int x1, int y1, int x2, int y2, int x3, int y3, uint32_t color);
    +void FillTri(int x1, int y1, int x2, int y2, int x3, int y3, uint32_t color);

    -void drawLineBresenham(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, uint32_t color);
    -void fillTriInternal(int x1, int y1, int x2, int y2, int x3, int y3, uint32_t color);

    -unsigned int m_width;
    -unsigned int m_height;
    -uint32_t* m_pPixels;
}

class Camera
{
    +Camera(double viewAngle, double nearPlaneDistance, double farPlaneDistance);
    +Matrix<4,4>& GetViewMat();
    +Matrix<4,4>& GetProjectionMatrix();
    
    #Matrix<4,4> m_viewMat;
    #Matrix<4,4> m_projMat;
}

class FPSCamera
{
    +FPSCamera(const Vector<3>& pos, double pitch, double yaw, 
                double viewAngle = 3.14159265359 / 2.0, double near = 0.1, double far = 1000);
}

class LookAtCamera
{
    +LookAtCamera(const Vector<3>& pos, Vector<3> target, Vector<3> up,
                double viewAngle = 3.14159265359 / 2.0, double near = 0.1, double far = 1000);
}

class Vertex
{
    +Vector<4> coords{0};
}

enum E_DrawFlags
{
    +FILL
    +WIREFRAME
}

class Mesh
{
        +Mesh();
        +Mesh(const std::vector<Vertex>& m_vertices, const std::vector<unsigned int>& m_vertexIndices);
        +void Draw(const Matrix<4,4>& View, const Matrix<4,4>& perspective, RenderTarget& target, E_DrawFlags flag = E_DrawFlags::FILL) const;
        +void SetVertices(const std::vector<Vertex>& vertices, const std::vector<unsigned int>& vertexIndices);
        +void SetModelMatrix(const Matrix<4,4>& mat);

        -void processTris(Vertex triOutput[3], const unsigned int triIndices[3], 
                        const Matrix<4,4>& viewMat, const Matrix<4,4> perspectiveMat) const;
        -void moveAndScaleTriForTarget(Vertex triOuput[3], const Vertex triInput[3], const RenderTarget& target) const;

        -std::vector<Vertex> m_vertices;
        -std::vector<unsigned int> m_vertexIndices;
        -Matrix<4,4> m_ModelMat = Matrix<4,4>::IdentityMatrix();
}

package Math <<Folder>>
{
    class Matrix <M,N>
}

Camera <|-- FPSCamera
Camera <|-- LookAtCamera
Mesh --> Camera
Mesh --> RenderTarget
Mesh o-- Vertex
Mesh --> E_DrawFlags
Window --> RenderTarget
Camera --> Matrix
Mesh --> Matrix
@enduml